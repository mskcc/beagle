# Generated by Django 2.2.24 on 2021-09-07 18:21

from django.conf import settings
from django.db import migrations
from notifier.models import JiraStatus
from notifier.jira.jira_client import JiraClient


def _convert_to_status(status):
    if status == 'Ready For Standard Delivery':
        return JiraStatus.READY_FOR_STANDARD_DELIVERY
    elif status == 'Ready For Custom Delivery':
        return JiraStatus.READY_FOR_CUSTOM_DELIVERY
    elif status == 'Not for CI':
        return JiraStatus.NOT_FOR_CI
    elif status == "Can't Do":
        return JiraStatus.CANT_DO
    elif status == "Terminal; Deliver As Is":
        return JiraStatus.TERMINAL_DELIVER_AS_IS
    elif status == "Partial Delivery; Will Rerun Remaining":
        return JiraStatus.PARTIAL_DELIVERY_WILL_RERUN_REMAINING
    elif status == "Deliver As Is; Will Not Rerun":
        return JiraStatus.DELIVER_AS_IS_WILL_NOT_RERUN
    elif status == "No Delivery; Will Reexecute":
        return JiraStatus.NO_DELIVERY_WILL_REEXECUTE
    elif status == "Primary Output Delivery":
        return JiraStatus.PRIMARY_OUTPUT_DELIVERY
    elif status == "Done":
        return JiraStatus.DONE
    elif status == "CI Review Needed":
        return JiraStatus.CI_REVIEW_NEEDED
    elif status == "Incomplete Request":
        return JiraStatus.INCOMPLETE_REQUEST
    elif status == "PM Hold":
        return JiraStatus.PM_HOLD
    elif status == "Missing Information":
        return JiraStatus.MISSING_INFORMATION
    else:
        return JiraStatus.UNKNOWN


def populate_jira_statuses(apps, _):
    JobGroupNotifier = apps.get_model('notifier', 'JobGroupNotifier')
    job_group_notifiers = JobGroupNotifier.objects.all()
    for jgn in job_group_notifiers:
        if jgn.jira_id:
            project = jgn.jira_id.split('-')[0]
            jira_client = JiraClient(url=settings.JIRA_URL,
                                     username=settings.JIRA_USERNAME,
                                     password=settings.JIRA_PASSWORD,
                                     project=project)
            print("Populating status for ticket %s" % jgn.jira_id)
            jira_ticket = jira_client.get_ticket(jgn.jira_id).json()
            jira_status = jira_ticket.get('fields', {}).get('status', {}).get('name')
            if jira_status:
                jgn.status = _convert_to_status(jira_status)
                print("Status for ticket %s is %s: %s" % (jgn.jira_id, jira_status, jgn.status))
                jgn.save(update_fields=('status',))
            else:
                print("Can't fetch status for ticket %s" % jgn.jira_id)


def revert_jira_statuses(apps, _):
    JobGroupNotifier = apps.get_model('notifier', 'JobGroupNotifier')
    job_group_notifiers = JobGroupNotifier.objects.all()
    for jgn in job_group_notifiers:
        jgn.status = JiraStatus.UNKNOWN
        jgn.save(update_fields=('status',))


class Migration(migrations.Migration):

    dependencies = [
        ('notifier', '0006_jobgroupnotifier_status'),
    ]

    operations = [
    ]
