from file_system.models import Request, FileMetadata, File
from file_system.repository import FileRepository
from django.conf import settings
import csv
from django.http import HttpResponse
import re


class CmoDMPManifest:
    """
    Description:
        Class used to create a manifest report (merged dmp and fastq metadata) for a given access request.
    Fields:
        request_ids: a valid Voyager access request ID
        manifest_header: variables we expect in the generated csv content
        request_keys: variables to extract from request fastq metadata
        csv: csv content (aka the manifest) generated by construct_csv() method
    """

    def __init__(self, request_ids):
        self.request_ids = request_ids
        # headers for returned csv
        self.manifest_header = [
            "igoRequestId",
            "primaryId",
            "cmoPatientId",
            "cmoSampleName",
            "dmpPatientId",
            "dmpImpactSamples",
            "dmpAccessSamples",
            "baitSet",
            "libraryVolume",
            "investigatorSampleId",
            "preservation",
            "species",
            "libraryConcentrationNgul",
            "tissueLocation",
            "sampleClass",
            "sex",
            "cfDNA2dBarcode",
            "sampleOrigin",
            "tubeId",
            "tumorOrNormal",
            "captureConcentrationNm",
            "oncotreeCode",
            "dnaInputNg",
            "collectionYear",
            "captureInputNg",
        ]
        # varibales we want from the request metadata
        self.request_keys = [
            "igoRequestId",
            "primaryId",
            "cmoPatientId",
            "cmoSampleName",
            "investigatorSampleId",
            "sampleClass",
            "oncotreeCode",
            "tumorOrNormal",
            "tissueLocation",
            "sampleOrigin",
            "preservation",
            "collectionYear",
            "sex",
            "species",
            "tubeId",
            "cfDNA2dBarcode",
            "baitSet",
            "libraryVolume",
            "libraryConcentrationNgul",
            "dnaInputNg",
            "captureConcentrationNm",
            "captureInputNg",
        ]
        # CSV manifest report
        self.csv = self.construct_csv()

    def construct_csv(self):
        """
        Construct a csv HTTP response from DMP BAM Metadata and Request Metadata
        """

        # get fastq metadata for a given request
        files = FileRepository.filter(
            file_group=settings.IMPORT_FILE_GROUP,
            metadata={settings.IGO_COMPLETE_METADATA_KEY: True},
            filter_redact=True,
        ).all()
        fastqs = files.filter(metadata__igoRequestId__in=self.request_ids)
        fastq_metadata = [fastq.metadata for fastq in fastqs]
        fastq_metadata = sorted(fastq_metadata, key=lambda d: d['cmoSampleName'])
        cmoPatientId = set([fastq["cmoPatientId"] for fastq in fastq_metadata])
        # get DMP BAM file group
        dmp_bams = FileRepository.filter(file_group=settings.DMP_BAM_FILE_GROUP)
        cmoPatientId_trim = [c.replace("C-", "") for c in cmoPatientId]
        # subset DMP BAM file group to patients in the provided requests
        pDmps = dmp_bams.filter(metadata__patient__cmo__in=cmoPatientId_trim)
        # set up HTTP response
        response = HttpResponse(content_type="text/csv")
        if len(self.request_ids) > 1:
            request_type = "multiple_requests"
        else:
            request_type = self.request_ids[0]
        response["Content-Disposition"] = 'attachment; filename="{request_type}.csv"'.format(request_type=request_type)
        writer = csv.DictWriter(response, fieldnames=self.manifest_header)
        writer.writeheader()
        primaryIds = set()  # we only want to look at fastq metdata for a PrimaryId once
        # for each fastq in the request query
        for fastq in fastq_metadata:
            pId = fastq["primaryId"]
            if pId not in primaryIds:  # we haven't seen the Primary Id
                primaryIds.add(pId)
                fastq_meta = {k: fastq[k] for k in fastq.keys() & self.request_keys}
                for key in self.request_keys:
                    if fastq_meta.get(key) is None:
                        fastq_meta[key] = None
                # look up cmopatient in dmp query set
                patient_id = fastq_meta["cmoPatientId"].replace("C-", "")
                dmp_meta = pDmps.filter(metadata__patient__cmo=patient_id)
                if dmp_meta.exists():
                    dmpImpactSamples = [
                        dmp.metadata["sample"] for dmp in dmp_meta if re.match(r"^P-.*-.*-I.*", dmp.metadata["sample"])
                    ]
                    dmpAccessSamples = [
                        dmp.metadata["sample"] for dmp in dmp_meta if re.match(r"^P-.*-.*-X.*", dmp.metadata["sample"])
                    ]
                    # add dmp data to request data, building up in csv
                    dmpImpactSamples = ";".join(dmpImpactSamples)
                    dmpAccessSamples = ";".join(dmpAccessSamples)
                    dmppatientid = dmp_meta[0].metadata["patient"]["dmp"]
                    fastq_meta["dmpImpactSamples"] = dmpImpactSamples
                    fastq_meta["dmpAccessSamples"] = dmpAccessSamples
                    fastq_meta["dmpPatientId"] = dmppatientid
                writer.writerow(fastq_meta)
        return response
